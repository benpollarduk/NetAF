name: release

on:
  workflow_dispatch:
    inputs:
      ver:
        description: 'The version number, should be specified as a semantic version e.g: X.Y.Z'
        required: true
      release-notes:
        description: 'The versions release notes'
        required: true

permissions:
  contents: read

env:
  DOTNET_VERSION: '8.0'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
       repository: benpollarduk/NetAF
       token: ${{ secrets.PAT }}

    - name: Setup environment
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dependencies
      run: dotnet restore

    - name: Install node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22

    - name: Update docfx
      run: dotnet tool update -g docfx

    - name: Update version and release notes in csproj file
      run: |
        echo "Version: ${{ inputs.ver }}"
        echo "Release notes: ${{ inputs.release-notes }}"
        
        # update the .csproj file with the input version
        sed -i "s/<Version>.*<\/Version>/<Version>${{ inputs.ver }}<\/Version>/" NetAF/NetAF.csproj
        sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${{ inputs.ver }}.0<\/AssemblyVersion>/" NetAF/NetAF.csproj
        sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>${{ inputs.ver }}<\/FileVersion>/" NetAF/NetAF.csproj

        # update the .csproj file with the release notes
        sed -i "s/<PackageReleaseNotes>.*<\/PackageReleaseNotes>/<PackageReleaseNotes>${{ inputs.release-notes }}<\/PackageReleaseNotes>/" NetAF/NetAF.csproj

    - name: Build
      run: dotnet build -c Release

    - name: Run tests with coverlet
      run: dotnet test /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=lcov

    - name: Tag the commit
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "${{ inputs.ver }}" -m "${{ inputs.ver }} tagged during GitHub action"
        git push --tags
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Push NuGet package (GitHub)
      run: |
        dotnet nuget push ./NetAF/bin/Release/*.nupkg --api-key ${{ secrets.PAT }} --source https://nuget.pkg.github.com/benpollarduk/index.json
    
    - name: Push NuGet package (NuGet.org)
      run: |
        dotnet nuget push ./NetAF/bin/Release/*.nupkg --api-key ${{ secrets.NUGET_TOKEN }} --source https://api.nuget.org/v3/index.json

    - name: Build documentation
      continue-on-error: true
      run: docfx docs/docfx/docfx.json

    - name: Copy website files, commit and tag, then push changes to NetAF-docs
      continue-on-error: true
      run: |
        mkdir NetAF-docs
        cd NetAF-docs
        git init
        git remote add origin https://${{ secrets.PAT }}@github.com/benpollarduk/NetAF-docs.git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git fetch
        git checkout main
        git rm -r --ignore-unmatch .
        cp -r ../docs/docfx/_site/* .
        git add .
        git commit -m "Update documentation"
        git tag -a "${{ inputs.ver }}" -m "${{ inputs.ver }} tagged during GitHub action"
        git push --follow-tags https://${{ secrets.PAT }}@github.com/benpollarduk/NetAF-docs.git HEAD:main

    - name: Update version in Blazor app
      run: |
        cd "${{ github.workspace }}"
        $filePath = "NetAF.Example.Blazor/NetAF.Example.Blazor.csproj"
        $newVersion = "${{ github.event.inputs.ver }}"
        $content = Get-Content $filePath
        $content -replace '<Version>0.0.0</Version>', "<Version>${newVersion}</Version>" | Set-Content -Path $filePath
      shell: pwsh

    - name: Publish Blazor app
      run: |
        cd NetAF.Example.Blazor
        dotnet publish -c Release -o dist
      shell: bash

    - name: Create temporary directory for Blazor app
      run: mkdir "${{ runner.temp }}\blazor"

    - name: Checkout existing Blazor app
      run: |
        cd "${{ runner.temp }}\blazor"
        git init
        git remote add origin https://${{ secrets.PAT }}@github.com/benpollarduk/NetAF.git
        git fetch origin blazor-publish
        git checkout blazor-publish

    - name: Delete existing Blazor files and directories
      run: |
        $directory = "${{ runner.temp }}\blazor"
        Get-ChildItem -Path $directory -Force -Recurse | Where-Object {
            $_.FullName -notmatch "\\\.git($|\\)"
        } | Remove-Item -Force -Recurse
      shell: pwsh

    - name: Copy Blazor files
      run: |
        cd "${{ runner.temp }}\blazor"
        cp -r ${{ github.workspace }}\NetAF.Example.Blazor\dist\wwwroot\* . -Force
      
    - name: Update the base in index.html
      run: |
        cd "${{ runner.temp }}\blazor"
        $filePath = "index.html"
        (Get-Content $filePath) -replace '<base href="" />', '<base href="/NetAF/" />' | Set-Content -Path $filePath
      shell: pwsh

    - name: Commit and push changes to blazor-publish
      run: |
        cd "${{ runner.temp }}\blazor"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update app"
        git push https://${{ secrets.PAT }}@github.com/benpollarduk/NetAF.git HEAD:blazor-publish
    
    - name: Create GitHub release
      uses: actions/create-release@v1
      with:
        tag_name: "${{ inputs.ver }}"
        release_name: "${{ inputs.ver }}"
        body: "${{ inputs.release-notes }}"
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
